# -*- coding: utf-8 -*-

RE_SETTINGS = Regex('var\ssettings\s=\s({.+?});', Regex.DOTALL)

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):

  try:
    req      = HTTP.Request(url)
    content  = req.content
    json     = RE_SETTINGS.search(content).group(1)
    settings = JSON.ObjectFromString(json)
  except:
    raise Ex.MediaNotAvailable

  video = settings['video']['file']
  #Log.Info("[xHamster URLService PlayVideo] VIDEO = " + video)

  if len(video) < 1:
    raise Ex.MediaNotAvailable

  duration = int(settings['vars']['new']['duration']) * 1000
  #Log.Info("[xHamster URLService MetadataObjectForURL] DURATION = " + duration)

  title = settings['vars']['new']['title']
  #Log.Info("[xHamster URLService MetadataObjectForURL] TITLE = " + title)

  thumb = settings['video']['thumb']
  #Log.Info("[xHamster URLService MetadataObjectForURL] THUMB = " + thumb)

  art = settings['vars']['new']['thumbUrl']
  #Log.Info("[xHamster URLService MetadataObjectForURL] THUMB = " + thumb)

  return VideoClipObject(
    title = title,
    duration = duration,
    genres = ['XXX','Adult','18+'],
    content_rating = 'X',
    thumb = Resource.ContentsOfURLWithFallback(thumb),
    art = Resource.ContentsOfURLWithFallback(art)
  )

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [
        PartObject(
          key = Callback(PlayVideo, url = url)
        )
      ],
      container = Container.MP4,
      video_codec = VideoCodec.H264,
      video_resolution = 'sd',
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True if Client.Product not in ['Plex Web'] else False
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url):
  try:
    req      = HTTP.Request(url)
    content  = req.content
    json     = RE_SETTINGS.search(content).group(1)
    settings = JSON.ObjectFromString(json)
  except:
    raise Ex.MediaNotAvailable

  video = settings['video']['file']
  #Log.Info("[xHamster URLService PlayVideo] VIDEO = " + video)

  if len(video) < 1:
    raise Ex.MediaNotAvailable

  return IndirectResponse(VideoClipObject, key=video)
