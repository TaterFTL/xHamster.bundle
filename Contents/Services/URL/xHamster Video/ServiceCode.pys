# -*- coding: utf-8 -*-

####################################################################################################
def NormalizeURL(url):
  return url

####################################################################################################
def MetadataObjectForURL(url):

  try:
    content = HTML.ElementFromURL( url )
  except:
    raise Ex.MediaNotAvailable

  video = content.xpath('//video/@file')[0]
  #Log.Info("[xHamster URLService PlayVideo] VIDEO = " + video)

  if len(video) < 1:
    raise Ex.MediaNotAvailable

  date = content.xpath('//td[@id="videoUser"]//span[@class="hint"]/@hint')[0]
  date = Datetime.ParseDate(date).date()
  #Log.Info("[xHamster URLService MetadataObjectForURL] DATE = " + date)

  duration = content.xpath('//td[@id="videoUser"]/div[@class="item"][2]/text()')[0]
  duration = Datetime.MillisecondsFromString(duration)
  #Log.Info("[xHamster URLService MetadataObjectForURL] DURATION = " + duration)

  title = content.xpath('//h1/text()')[0]
  #Log.Info("[xHamster URLService MetadataObjectForURL] TITLE = " + title)

  try:
    summary = content.xpath('//td[@class="desc"]/h2/text()')[0]
  except:
    summary = ""
  #Log.Info("[xHamster URLService MetadataObjectForURL] SUMMARY = " + summary)

  thumb = content.xpath('//video/@poster')[0]
  #Log.Info("[xHamster URLService MetadataObjectForURL] THUMB = " + thumb)

  return VideoClipObject(
    title = title,
    summary = summary,
    originally_available_at = date,
    duration = duration,
		genres = ['XXX','Adult','18+'],
		content_rating = 'X',
    thumb = Resource.ContentsOfURLWithFallback(thumb),
    art = Resource.ContentsOfURLWithFallback(thumb)
  )

####################################################################################################
def MediaObjectsForURL(url):

  return [
    MediaObject(
      parts = [
        PartObject(
          key = Callback(PlayVideo, url = url)
        )
      ],
      container = Container.MP4,
      video_codec = VideoCodec.H264,
			video_resolution = 'sd',
      audio_codec = AudioCodec.AAC,
      audio_channels = 2,
      optimized_for_streaming = True if Client.Product not in ['Plex Web'] else False
    )
  ]

####################################################################################################
@indirect
def PlayVideo(url):
  try:
    content = HTML.ElementFromURL( url )
  except:
    raise Ex.MediaNotAvailable

  video = content.xpath('//video/@file')[0]
  #Log.Info("[xHamster URLService PlayVideo] VIDEO = " + video)

  if len(video) < 1:
    raise Ex.MediaNotAvailable

  return IndirectResponse(VideoClipObject, key=video)
