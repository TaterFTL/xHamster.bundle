import urlparse
import subprocess
import os
import stat
import sys

VIDEO_URL = 'http://xhamster.com/movies/%s/.html'
RE_THUMB = Regex("'image':'([^']+)'")
RE_SRV_FILE = Regex("'srv': '([^']*)'.+'file': '([^']+)'", Regex.DOTALL)


####################################################################################################
def NormalizeURL(url):

        if '/xembed.php' in url:
                video_id = url.split('video=')[-1]
                return VIDEO_URL % video_id
        else:
                return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

        page = HTTP.Request(url).content
        html = HTML.ElementFromString(page)

        title = html.xpath('//title/text()')[0].rsplit(' - ', 1)[0].strip()

        # A missing description tag means we don't have a video
        try:
                summary = html.xpath('//meta[@name="description"]/@content')[0].split('xHamster.com! ', 1)[-1].strip()
        except:
                raise Ex.MediaNotAvailable

        if summary.startswith('xHamster'):
                summary = None

        try:
                thumb = RE_THUMB.search(page).group(1)
        except:
                thumb = ''

        return VideoClipObject(
                title = title,
                summary = summary,
                thumb = Resource.ContentsOfURLWithFallback(thumb),
                genres = ['XXX','Adult','18+'],
                content_rating = 'G'
        )

####################################################################################################
def MediaObjectsForURL(url):

        return [
                MediaObject(
                        parts = [PartObject(key=Callback(PlayVideo, url=url))],
                        container = Container.MP4,
                        video_codec = VideoCodec.H264,
                        audio_codec = AudioCodec.AAC,
                        audio_channels = 2
                )     
        ]


####################################################################################################
@indirect
def PlayVideoFLV(url):

        data = HTTP.Request(url).content

        try:
                (srv, file) = RE_SRV_FILE.search(data).groups()
        except:
                raise Ex.MediaNotAvailable

        if srv == '':
                if file.startswith('http%3A%2F%2F'):
                        file = String.Unquote(file)
                final_url = file
        else:
                final_url = '%s/key=%s' % (srv, file)

        return IndirectResponse(VideoClipObject, key=final_url)

####################################################################################################
@indirect
def PlayVideo(url):

        #data = HTTP.Request(url).content

        try:
                #(srv, file) = RE_SRV_FILE.search(data).groups()
                r6 = HTML.ElementFromURL( url)
                gg = r6.xpath( "//div[@class='mp4']")
                t1 = gg[0].xpath( 'a/@href')
                #vurl = t1[0]
                #vurl = re.sub( r'.*?mp4File\=','',t1[0])
                #Log( 'jhvurl: ' + vurl )
                p1 =  urlparse.urlparse( t1[0])
                q1 = urlparse.parse_qs( p1.query)
                vidurl = q1['mp4File'][0]
                vidurl = String.Unquote( vidurl) 
                Log('jhsvc: ' + vidurl)
        except:
                raise Ex.MediaNotAvailable

        #if srv == '':
        #       if file.startswith('http%3A%2F%2F'):
        #               file = String.Unquote(file)
        #       final_url = file
        #else:
        #               final_url = '%s/key=%s' % (srv, file)
        #cmd = '/usr/bin/mplayer ' + vidurl
        #fout = os.open('/dev/null',
        #       os.O_WRONLY)
        #subprocess.Popen( [cmd], shell=True, stderr=fout, stdout=fout  ).pid 
        #return DirectoryObject(key='http://ttt123.poo.html')
        return IndirectResponse(VideoClipObject, key=vidurl)
