import types, urlparse, re, random

NAME = 'xHamster'
XH_BASE = 'http://xhamster.com'
XH_CHANNELS = 'http://xhamster.com/'
XH_CHANNEL = 'http://xhamster.com/channels/%s-%s-%s.html'

randomArt = random.randint(1,3)
ART = 'artwork-'+str(randomArt)+'.jpg'

ICON = 'icon-default.png'
ICON_PREFS  = 'icon-prefs.png'
NXT = 'dudehamsterwheel.jpg'
PRV = 'hamsterback.jpg'
XH_MYDEBUG = 0

def xhloginfo( infostr):
    if XH_MYDEBUG == 1:
       Log.Info( infostr)

####################################################################################################
def Start():

	#ObjectContainer.title1 = NAME
	ObjectContainer.art = R(ART)
	HTTP.CacheTime = CACHE_1HOUR
	HTTP.Headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20100101 Firefox/23.0'
	

###################################################################################################
@handler('/video/xhamster', NAME)
def MainMenu():

	oc = ObjectContainer(title1=NAME, no_cache=True, art=R(ART) )

        pageContent = HTML.ElementFromURL(XH_CHANNELS)
        q = pageContent.xpath( "//a/@href[re:test( ., '^\/channels.*\.html', 'i' )]",
             namespaces={"re": "http://exslt.org/regular-expressions"})
        xhloginfo( "testing 234")
        getchan = re.compile( r'(.*)-(.*?)\.html')
        
        ## add page for basic latest vids
        titxt = 'New'
        oc.add(DirectoryObject(
			key = Callback(ClipsPage, title=titxt, chanurl='/new', page=1),
			title = titxt
		))
		
        for chan in q:
	        match = getchan.search( chan)
	        if match:
		   basechan = match.group( 1)
                xhloginfo( "in loop")
                tit = chan.getparent()
                xhloginfo( "jhok1")
                if( tit is types.NoneType ):
		    xhloginfo( 'jhnonetit')
		    continue
                titxt = tit.text
                if( titxt is None ):
                    continue
                xhloginfo( 'jh tit url: ' + titxt + chan )
                oc.add(DirectoryObject(
			key = Callback(ClipsPage, title=titxt, chanurl=basechan, page=1),
			title = titxt
		))


	return oc

####################################################################################################
@route('/video/xhamster/clipspage')
def ClipsPage(title, chanurl, page=0):

        xhloginfo( 'jhzzClipsPage')
	oc = ObjectContainer(title1 = title, title2=title+'/Pg:'+str(page), replace_parent=True, no_cache=True, art=R(ART))
	oc.title1 = title
	xhloginfo( 'chanurl: ' + chanurl)
        if ( chanurl == '/new' ) :
	    pageContent = HTML.ElementFromURL( XH_BASE + chanurl + '/' + page + '.html')
	else:
	    pageContent = HTML.ElementFromURL( XH_BASE + chanurl + '-' + page + '.html')
	initialXpath = "//div[@class='video']"
	itemcnt = 0
	nxtpage = 0
	for videoItem in pageContent.xpath(initialXpath):
	        itemcnt += 1
		ht = videoItem.xpath( 'a/@href')
		xhloginfo( 'linkage:'+ht[0])
		vtit = videoItem.xpath( 'a/u/@title' )
		videoItemTitle = vtit[0]
		videoItemLink  = videoItem.xpath('a')[0].get('href')
		videoItemThumb = videoItem.xpath('a/img')[0].get('src')		
		vtm = videoItem.xpath( 'a/b')
		duration = vtm[0].text
		#videoItemDuration = GetDurationFromString(duration)
		videoItemRating = (len(videoItem.xpath('img[contains(@src,"/star.gif")]'))+(float(len(videoItem.xpath('img[contains(@src,"/starhalf.gif")]')))/2))*2
		videoItemSummary = 'Duration: ' + duration
		#videoItemSummary += '\r\nRating: ' + str(videoItemRating)
	        xhloginfo('videoItemTitle: '+videoItemTitle+' | videoItemLink: '+videoItemLink+' | videoItemThumb: '+videoItemThumb+' | videoItemSummary: '+videoItemSummary)
                #thumb = Resource.ContentsOfURLWithFallback( videoItemThumb)
	        #timg = Resource.ContentsOfURLWithFallback(url=videoItemThumb)
	        oc.add(EpisodeObject(
	                url = videoItemLink,
	                show=NAME,
	                season=int(page),
	                index=int(itemcnt),
			title = videoItemTitle,
			thumb = Resource.ContentsOfURLWithFallback(url=videoItemThumb),
			art = Resource.ContentsOfURLWithFallback(url=videoItemThumb)
		))
		
	if itemcnt > 0:
	    nxtpage = int(page) + 1
	    oc.add( DirectoryObject(
	                #rating_key=chanurl+page,
	                #index=int(itemcnt+1),
	                #season=int(page),
			key = Callback(ClipsPage, title=title, chanurl=chanurl, page=nxtpage),
			title = title + '/Pg:' + str(nxtpage),
			thumb = R(NXT)
		))
	

	if len(oc) < 1:
		return ObjectContainer(header="Empty", message="This channel doesn't contain any videos.")
	else:
		#oc.objects.sort(key = lambda obj: obj.index)
		return oc
